//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Input/Input Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Input/Input Controller.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @InputController: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Controller"",
    ""maps"": [
        {
            ""name"": ""gameplay"",
            ""id"": ""ca012da0-d578-4ec9-b41b-c6372b8412cf"",
            ""actions"": [
                {
                    ""name"": ""look"",
                    ""type"": ""Value"",
                    ""id"": ""70382c7c-5cc4-4246-a62f-76341238a23f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""aa1e421d-c1ab-4023-a2d2-d6b082abd6b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""2ed0f468-8e76-49bf-ac43-ac3fe330b856"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""688f1a89-96f5-47f4-9641-dcd7d375bc5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""61b9d0d8-2fc3-4903-b1d3-312e22f1b195"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""walk"",
                    ""type"": ""Button"",
                    ""id"": ""722c44c3-9155-48ab-8fcd-2152a96c9b8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""crouch"",
                    ""type"": ""Button"",
                    ""id"": ""68d53629-5e68-41c9-95a4-6f5224a69327"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""use"",
                    ""type"": ""Button"",
                    ""id"": ""50fedd81-036f-4c57-a2bf-a73a0757afc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""reload"",
                    ""type"": ""Button"",
                    ""id"": ""e84cf773-5ca5-42cb-ac98-5e566d7eaa4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Buy"",
                    ""type"": ""Button"",
                    ""id"": ""f3074934-2b04-48bb-89c6-070bceff7a67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""dropW"",
                    ""type"": ""Button"",
                    ""id"": ""1f48702b-085e-4d09-af0c-c9bc1d622654"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""primary"",
                    ""type"": ""Button"",
                    ""id"": ""0e881ecf-0039-40af-9518-8bf93585aa65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""secondary"",
                    ""type"": ""Button"",
                    ""id"": ""a245155f-174c-4e2c-9f2a-86523eb3a935"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""melee"",
                    ""type"": ""Button"",
                    ""id"": ""c7315b1d-1fbe-4656-a314-5432137f3254"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""c4"",
                    ""type"": ""Button"",
                    ""id"": ""0c07e080-c4b1-43a6-a9e8-f1df4e6f7e8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""abilityDashF"",
                    ""type"": ""Button"",
                    ""id"": ""ab615a01-3073-47da-a6e4-c425ce1300bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""abilityFlashZ"",
                    ""type"": ""Button"",
                    ""id"": ""a176a20f-4975-4731-8be7-9cdb90f513f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""abilityXrayX"",
                    ""type"": ""Button"",
                    ""id"": ""1d342325-8e6a-42ec-9c8b-7a6a5e9aefe6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""abilityGrenadeC"",
                    ""type"": ""Button"",
                    ""id"": ""a967ac3b-0acc-4505-9d2a-9117fa26f7ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""abilityMolotovV"",
                    ""type"": ""Button"",
                    ""id"": ""392fedb9-0705-466c-ba01-5b8b1aaf44ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""fb342ebe-a433-46f4-b6cb-de64a0e9f46f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5f3154d7-41cd-4e8a-b625-202d2a0b2e0b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""06b2d5d4-cbcd-4ddf-bf66-93f26645d236"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""061e3eb2-d966-471e-b1c9-0bc4ee78b6cb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""99c0e110-8dcf-4732-8a23-bfd6605fbbeb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""405a5c5a-4b71-4d79-b434-cc71c16ffc8f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""711198e7-019c-4469-838e-ef3f4a621223"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5209d29e-f57d-47c1-afb1-7d697d97c639"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23bb4e94-28d5-4937-ad49-a0cf4ebaedab"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f9cd4b1-b827-4388-a687-dbe8ae127ed9"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c499c59-72d3-4037-b9b7-6f424b60af4a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83883a5a-61ef-4827-88bf-c0391276e130"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cfa8e5e-4de3-4819-b2b1-0c693ab62736"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""abilityDashF"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7324d39-d97e-4ec5-adbc-a5aca9506952"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""abilityFlashZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ee0f2c7-a798-4a1c-8f6b-eeef2f8950ba"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""abilityGrenadeC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""616c30ac-0bc9-42d2-bf1c-db08f39435ac"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dropW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b40db9c-bdbf-4461-a941-ab4ea174a165"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""abilityXrayX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30b7ba9a-6958-4ea2-a717-96c8ca675714"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""abilityMolotovV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""756192e4-9acc-4929-8dbd-8fbb214bc477"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""c4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""178880f8-39ee-401c-a097-d7e7883a33c0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0502004d-6e0d-4582-a5e3-2d765d5c2713"",
                    ""path"": ""*/{PrimaryAction}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""500bd369-7ade-483c-88da-cdbd40f1dfb0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9eb651cd-5300-4d3f-90c9-82f0321dfa24"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f11ed6af-dd9b-44dd-bb3e-160f769b3dab"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Buy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e43d0f04-fb7e-4d56-b73b-5eccb27085e2"",
                    ""path"": ""*/{SecondaryAction}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""menu"",
            ""id"": ""b9ac4f57-7857-44e1-a88d-18149bbef52e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""868cb03a-e054-409c-b363-c3c6aeadf15f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""48178651-9ce2-48af-9f99-76b0f803d5c8"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // gameplay
        m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
        m_gameplay_look = m_gameplay.FindAction("look", throwIfNotFound: true);
        m_gameplay_shoot = m_gameplay.FindAction("shoot", throwIfNotFound: true);
        m_gameplay_Zoom = m_gameplay.FindAction("Zoom", throwIfNotFound: true);
        m_gameplay_move = m_gameplay.FindAction("move", throwIfNotFound: true);
        m_gameplay_jump = m_gameplay.FindAction("jump", throwIfNotFound: true);
        m_gameplay_walk = m_gameplay.FindAction("walk", throwIfNotFound: true);
        m_gameplay_crouch = m_gameplay.FindAction("crouch", throwIfNotFound: true);
        m_gameplay_use = m_gameplay.FindAction("use", throwIfNotFound: true);
        m_gameplay_reload = m_gameplay.FindAction("reload", throwIfNotFound: true);
        m_gameplay_Buy = m_gameplay.FindAction("Buy", throwIfNotFound: true);
        m_gameplay_dropW = m_gameplay.FindAction("dropW", throwIfNotFound: true);
        m_gameplay_primary = m_gameplay.FindAction("primary", throwIfNotFound: true);
        m_gameplay_secondary = m_gameplay.FindAction("secondary", throwIfNotFound: true);
        m_gameplay_melee = m_gameplay.FindAction("melee", throwIfNotFound: true);
        m_gameplay_c4 = m_gameplay.FindAction("c4", throwIfNotFound: true);
        m_gameplay_abilityDashF = m_gameplay.FindAction("abilityDashF", throwIfNotFound: true);
        m_gameplay_abilityFlashZ = m_gameplay.FindAction("abilityFlashZ", throwIfNotFound: true);
        m_gameplay_abilityXrayX = m_gameplay.FindAction("abilityXrayX", throwIfNotFound: true);
        m_gameplay_abilityGrenadeC = m_gameplay.FindAction("abilityGrenadeC", throwIfNotFound: true);
        m_gameplay_abilityMolotovV = m_gameplay.FindAction("abilityMolotovV", throwIfNotFound: true);
        // menu
        m_menu = asset.FindActionMap("menu", throwIfNotFound: true);
        m_menu_Newaction = m_menu.FindAction("New action", throwIfNotFound: true);
    }

    ~@InputController()
    {
        UnityEngine.Debug.Assert(!m_gameplay.enabled, "This will cause a leak and performance issues, InputController.gameplay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_menu.enabled, "This will cause a leak and performance issues, InputController.menu.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gameplay
    private readonly InputActionMap m_gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_gameplay_look;
    private readonly InputAction m_gameplay_shoot;
    private readonly InputAction m_gameplay_Zoom;
    private readonly InputAction m_gameplay_move;
    private readonly InputAction m_gameplay_jump;
    private readonly InputAction m_gameplay_walk;
    private readonly InputAction m_gameplay_crouch;
    private readonly InputAction m_gameplay_use;
    private readonly InputAction m_gameplay_reload;
    private readonly InputAction m_gameplay_Buy;
    private readonly InputAction m_gameplay_dropW;
    private readonly InputAction m_gameplay_primary;
    private readonly InputAction m_gameplay_secondary;
    private readonly InputAction m_gameplay_melee;
    private readonly InputAction m_gameplay_c4;
    private readonly InputAction m_gameplay_abilityDashF;
    private readonly InputAction m_gameplay_abilityFlashZ;
    private readonly InputAction m_gameplay_abilityXrayX;
    private readonly InputAction m_gameplay_abilityGrenadeC;
    private readonly InputAction m_gameplay_abilityMolotovV;
    /// <summary>
    /// Provides access to input actions defined in input action map "gameplay".
    /// </summary>
    public struct GameplayActions
    {
        private @InputController m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public GameplayActions(@InputController wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "gameplay/look".
        /// </summary>
        public InputAction @look => m_Wrapper.m_gameplay_look;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/shoot".
        /// </summary>
        public InputAction @shoot => m_Wrapper.m_gameplay_shoot;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/Zoom".
        /// </summary>
        public InputAction @Zoom => m_Wrapper.m_gameplay_Zoom;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/move".
        /// </summary>
        public InputAction @move => m_Wrapper.m_gameplay_move;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/jump".
        /// </summary>
        public InputAction @jump => m_Wrapper.m_gameplay_jump;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/walk".
        /// </summary>
        public InputAction @walk => m_Wrapper.m_gameplay_walk;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/crouch".
        /// </summary>
        public InputAction @crouch => m_Wrapper.m_gameplay_crouch;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/use".
        /// </summary>
        public InputAction @use => m_Wrapper.m_gameplay_use;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/reload".
        /// </summary>
        public InputAction @reload => m_Wrapper.m_gameplay_reload;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/Buy".
        /// </summary>
        public InputAction @Buy => m_Wrapper.m_gameplay_Buy;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/dropW".
        /// </summary>
        public InputAction @dropW => m_Wrapper.m_gameplay_dropW;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/primary".
        /// </summary>
        public InputAction @primary => m_Wrapper.m_gameplay_primary;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/secondary".
        /// </summary>
        public InputAction @secondary => m_Wrapper.m_gameplay_secondary;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/melee".
        /// </summary>
        public InputAction @melee => m_Wrapper.m_gameplay_melee;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/c4".
        /// </summary>
        public InputAction @c4 => m_Wrapper.m_gameplay_c4;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/abilityDashF".
        /// </summary>
        public InputAction @abilityDashF => m_Wrapper.m_gameplay_abilityDashF;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/abilityFlashZ".
        /// </summary>
        public InputAction @abilityFlashZ => m_Wrapper.m_gameplay_abilityFlashZ;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/abilityXrayX".
        /// </summary>
        public InputAction @abilityXrayX => m_Wrapper.m_gameplay_abilityXrayX;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/abilityGrenadeC".
        /// </summary>
        public InputAction @abilityGrenadeC => m_Wrapper.m_gameplay_abilityGrenadeC;
        /// <summary>
        /// Provides access to the underlying input action "gameplay/abilityMolotovV".
        /// </summary>
        public InputAction @abilityMolotovV => m_Wrapper.m_gameplay_abilityMolotovV;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_gameplay; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="GameplayActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="GameplayActions" />
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @look.started += instance.OnLook;
            @look.performed += instance.OnLook;
            @look.canceled += instance.OnLook;
            @shoot.started += instance.OnShoot;
            @shoot.performed += instance.OnShoot;
            @shoot.canceled += instance.OnShoot;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @walk.started += instance.OnWalk;
            @walk.performed += instance.OnWalk;
            @walk.canceled += instance.OnWalk;
            @crouch.started += instance.OnCrouch;
            @crouch.performed += instance.OnCrouch;
            @crouch.canceled += instance.OnCrouch;
            @use.started += instance.OnUse;
            @use.performed += instance.OnUse;
            @use.canceled += instance.OnUse;
            @reload.started += instance.OnReload;
            @reload.performed += instance.OnReload;
            @reload.canceled += instance.OnReload;
            @Buy.started += instance.OnBuy;
            @Buy.performed += instance.OnBuy;
            @Buy.canceled += instance.OnBuy;
            @dropW.started += instance.OnDropW;
            @dropW.performed += instance.OnDropW;
            @dropW.canceled += instance.OnDropW;
            @primary.started += instance.OnPrimary;
            @primary.performed += instance.OnPrimary;
            @primary.canceled += instance.OnPrimary;
            @secondary.started += instance.OnSecondary;
            @secondary.performed += instance.OnSecondary;
            @secondary.canceled += instance.OnSecondary;
            @melee.started += instance.OnMelee;
            @melee.performed += instance.OnMelee;
            @melee.canceled += instance.OnMelee;
            @c4.started += instance.OnC4;
            @c4.performed += instance.OnC4;
            @c4.canceled += instance.OnC4;
            @abilityDashF.started += instance.OnAbilityDashF;
            @abilityDashF.performed += instance.OnAbilityDashF;
            @abilityDashF.canceled += instance.OnAbilityDashF;
            @abilityFlashZ.started += instance.OnAbilityFlashZ;
            @abilityFlashZ.performed += instance.OnAbilityFlashZ;
            @abilityFlashZ.canceled += instance.OnAbilityFlashZ;
            @abilityXrayX.started += instance.OnAbilityXrayX;
            @abilityXrayX.performed += instance.OnAbilityXrayX;
            @abilityXrayX.canceled += instance.OnAbilityXrayX;
            @abilityGrenadeC.started += instance.OnAbilityGrenadeC;
            @abilityGrenadeC.performed += instance.OnAbilityGrenadeC;
            @abilityGrenadeC.canceled += instance.OnAbilityGrenadeC;
            @abilityMolotovV.started += instance.OnAbilityMolotovV;
            @abilityMolotovV.performed += instance.OnAbilityMolotovV;
            @abilityMolotovV.canceled += instance.OnAbilityMolotovV;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="GameplayActions" />
        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @look.started -= instance.OnLook;
            @look.performed -= instance.OnLook;
            @look.canceled -= instance.OnLook;
            @shoot.started -= instance.OnShoot;
            @shoot.performed -= instance.OnShoot;
            @shoot.canceled -= instance.OnShoot;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @walk.started -= instance.OnWalk;
            @walk.performed -= instance.OnWalk;
            @walk.canceled -= instance.OnWalk;
            @crouch.started -= instance.OnCrouch;
            @crouch.performed -= instance.OnCrouch;
            @crouch.canceled -= instance.OnCrouch;
            @use.started -= instance.OnUse;
            @use.performed -= instance.OnUse;
            @use.canceled -= instance.OnUse;
            @reload.started -= instance.OnReload;
            @reload.performed -= instance.OnReload;
            @reload.canceled -= instance.OnReload;
            @Buy.started -= instance.OnBuy;
            @Buy.performed -= instance.OnBuy;
            @Buy.canceled -= instance.OnBuy;
            @dropW.started -= instance.OnDropW;
            @dropW.performed -= instance.OnDropW;
            @dropW.canceled -= instance.OnDropW;
            @primary.started -= instance.OnPrimary;
            @primary.performed -= instance.OnPrimary;
            @primary.canceled -= instance.OnPrimary;
            @secondary.started -= instance.OnSecondary;
            @secondary.performed -= instance.OnSecondary;
            @secondary.canceled -= instance.OnSecondary;
            @melee.started -= instance.OnMelee;
            @melee.performed -= instance.OnMelee;
            @melee.canceled -= instance.OnMelee;
            @c4.started -= instance.OnC4;
            @c4.performed -= instance.OnC4;
            @c4.canceled -= instance.OnC4;
            @abilityDashF.started -= instance.OnAbilityDashF;
            @abilityDashF.performed -= instance.OnAbilityDashF;
            @abilityDashF.canceled -= instance.OnAbilityDashF;
            @abilityFlashZ.started -= instance.OnAbilityFlashZ;
            @abilityFlashZ.performed -= instance.OnAbilityFlashZ;
            @abilityFlashZ.canceled -= instance.OnAbilityFlashZ;
            @abilityXrayX.started -= instance.OnAbilityXrayX;
            @abilityXrayX.performed -= instance.OnAbilityXrayX;
            @abilityXrayX.canceled -= instance.OnAbilityXrayX;
            @abilityGrenadeC.started -= instance.OnAbilityGrenadeC;
            @abilityGrenadeC.performed -= instance.OnAbilityGrenadeC;
            @abilityGrenadeC.canceled -= instance.OnAbilityGrenadeC;
            @abilityMolotovV.started -= instance.OnAbilityMolotovV;
            @abilityMolotovV.performed -= instance.OnAbilityMolotovV;
            @abilityMolotovV.canceled -= instance.OnAbilityMolotovV;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />.
        /// </summary>
        /// <seealso cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />
        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="GameplayActions.AddCallbacks(IGameplayActions)" />
        /// <seealso cref="GameplayActions.RemoveCallbacks(IGameplayActions)" />
        /// <seealso cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />
        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="GameplayActions" /> instance referencing this action map.
    /// </summary>
    public GameplayActions @gameplay => new GameplayActions(this);

    // menu
    private readonly InputActionMap m_menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_menu_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "menu".
    /// </summary>
    public struct MenuActions
    {
        private @InputController m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MenuActions(@InputController wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "menu/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m_menu_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_menu; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MenuActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MenuActions" />
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MenuActions" />
        private void UnregisterCallbacks(IMenuActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MenuActions.UnregisterCallbacks(IMenuActions)" />.
        /// </summary>
        /// <seealso cref="MenuActions.UnregisterCallbacks(IMenuActions)" />
        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MenuActions.AddCallbacks(IMenuActions)" />
        /// <seealso cref="MenuActions.RemoveCallbacks(IMenuActions)" />
        /// <seealso cref="MenuActions.UnregisterCallbacks(IMenuActions)" />
        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MenuActions" /> instance referencing this action map.
    /// </summary>
    public MenuActions @menu => new MenuActions(this);
    private int m_KeyboardSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "gameplay" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="GameplayActions.AddCallbacks(IGameplayActions)" />
    /// <seealso cref="GameplayActions.RemoveCallbacks(IGameplayActions)" />
    public interface IGameplayActions
    {
        /// <summary>
        /// Method invoked when associated input action "look" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLook(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "shoot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShoot(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Zoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnZoom(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJump(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "walk" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWalk(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "crouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCrouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "use" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUse(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "reload" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReload(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Buy" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBuy(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "dropW" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDropW(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "primary" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimary(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "secondary" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondary(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "melee" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMelee(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "c4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnC4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "abilityDashF" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAbilityDashF(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "abilityFlashZ" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAbilityFlashZ(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "abilityXrayX" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAbilityXrayX(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "abilityGrenadeC" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAbilityGrenadeC(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "abilityMolotovV" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAbilityMolotovV(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "menu" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MenuActions.AddCallbacks(IMenuActions)" />
    /// <seealso cref="MenuActions.RemoveCallbacks(IMenuActions)" />
    public interface IMenuActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
}
